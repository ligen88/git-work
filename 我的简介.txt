在本学期中我们学习了git的一系列基本操作，至git结课也算对git有了一定的了解，首先Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理，可以实现对一个文件多方面修改而不影响其稳定版本。
这一点在我们日后的工作或者学习中会有至关重要的作用，毕竟，一个软件的升级需要大量的改动，而git便在这之中发挥了至关重要的作用。
经过翻阅资料我们也可知道关于git各种状况，首先是背景，在各操作系统下，文本文件所使用的换行符是不一样的。UNIX/Linux 使用的是 0x0A（LF），早期的 Mac OS 使用的是0x0D（CR），后来的 OS X 在更换内核后与 UNIX 保持一
致了。但 DOS/Windows 一直使用 0x0D0A（CRLF）作为换行符。这种不统一确实对跨平台的文件交换带来麻烦。虽然靠谱的文本编辑器和 IDE 都支持这几种换行符，但是缺乏标准。
Git 由大名鼎鼎的 Linus 开发，最初只可运行于 unix 系统，因此推荐只将 UNIX 风格的换行符保存入库。但它也考虑到跨平台协作的场景，并且提供了一个“换行符自动转换”功能。
这个功能默认处于“自动模式”，当你在签出文件时，它试图将 UNIX 换行符（LF）替换为 Windows 的换行符（CRLF）；当你在提交文件时，它又试图将 CRLF 替换为 LF。
而缺陷也是非常明显，Git 的“换行符自动转换”功能听起来似乎很智能、很贴心，因为它试图一方面保持仓库内文件的一致性（UNIX 风格），一方面又保证本地文件的兼容性（Windows 风格）。但遗憾的是，这个功能是有 bug 的，而且在短期内都不太可能会修正。
问题具体表现在，如果你手头的这个文件是一个包含中文字符的 UTF-8 文件，那么这个“换行符自动转换”功能 在提交时是不工作的（但签出时的转换处理没有问题）。我猜测可能这个功能模块在处理中文字符 + CRLF 这对组合时直接崩溃返回了。
这可能还不是唯一的触发场景。总之，任何事物都有其利和弊，git也是。